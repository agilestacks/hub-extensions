#!/bin/bash -e
# shellcheck disable=SC2086,SC2064,SC2046

usage() {
cat << EOF
Kubernetes parameters:
  -k  --kubeconfig        Path to the kubeconfig. If not specified then use default to kubectl
  -c  --kubecontext       Name of Kubernetes context in Kubeconfig file
                          "_" reserved for "current context"
  --current-kubecontext   Use current kubecontext existing
                          configuration (mandatory)

Use: hub configure [-c _] or [--current-kubecontext] for current kubecontext

EOF
}

DOT_ENV=${DOT_ENV:-".env"}
while [ "$1" != "" ]; do
  case "$1" in
    -k | --kubeconfig )      shift
                             export KUBECONFIG="$1"
                             ;;
    -c | --kubecontext )     shift
                             KUBECONTEXT="$1"
                             ;;
    --current-kubecontext )  KUBECONTEXT="_"
                             ;;
    --output )               shift
                             DOT_ENV="$1"
                             ;;                               
  esac
  shift
done

VERBOSE=${VERBOSE:-false}
if test "$VERBOSE" = "true"; then
  set -x
fi

dotenv="$(dirname $(dirname $0))/env/dotenv -f $DOT_ENV)"
DOMAIN=${HUB_DOMAIN_NAME:-$($dotenv get "HUB_DOMAIN_NAME")}

if test -z "$KUBECONTEXT" || \
   test -z "$DOMAIN"; then
  usage
  exit 1
fi

echo "Configuring Kubernetes"
echo -n "* Using context: "
if test "$KUBECONTEXT" == "_"; then
  KUBECONTEXT="$(kubectl config current-context)"
fi
echo "$KUBECONTEXT"

echo -n "* Checking connectivity to cluster: "
if kubectl cluster-info > /dev/null; then
  echo "Connected"
else
  echo exit 2
fi

CLUSTER_NAME="$(kubectl config view --raw -o json \
| jq -r '.contexts[] | select(.name == "'$KUBECONTEXT'").context.cluster')"
USERNAME="$(kubectl config view --raw -o json \
| jq -r '.contexts[] | select(.name == "'$KUBECONTEXT'").context.user')"
CLUSTER="$(kubectl config view --raw -o json \
| jq -cM '.clusters[] | select(.name == "'$CLUSTER_NAME'") + {"name": "'$DOMAIN'"}')"
USER="$(kubectl config view --raw -o json \
| jq -cM '.users[] | select(.name == "'$USERNAME'")')"
# shellcheck disable=SC2006
TEMP=`mktemp /tmp/superhub.XXXXXX` || exit 1
trap "rm -f $TEMP" EXIT

  cat <<EOF > $TEMP
{
  "kind": "Config",
  "apiVersion": "v1",
  "preferences": {},
  "clusters": [
    $CLUSTER
  ],
  "users": [
    $USER
  ],
  "contexts": [
    {
      "name": "$DOMAIN",
      "context": {
        "cluster": "$DOMAIN",
        "user": "$USERNAME"
      }
    }
  ],
  "current-context": "$DOMAIN"
}
EOF

WORKDIR=${WORKDIR:-$(pwd)}
echo -n "* Saving kubeconfig to .hub/env/$DOMAIN.kubeconfig: "
$(dirname $(dirname $0))/env/copy "$TEMP" "$WORKDIR/.hub/env/$DOMAIN.kubeconfig"

DOT_ENV=${DOT_ENV:-"$WORKDIR/.env"}
cat << EOF >> $DOT_ENV
# Location of sand boxed kubeconfig
export KUBECONFIG="$WORKDIR/.hub/env/$DOMAIN.kubeconfig"
EOF
