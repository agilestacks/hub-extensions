#!/bin/bash -e
# shellcheck disable=SC2046,SC2068,SC2064

usage() {
  cat << EOF
Reads configuration in hub.yaml and configures stack for deployment

Use: 
  hub configure <parameters>

Common parameters:
  -f  --file              Hub parameter file (defauts to ./params.yaml)
  -r  --requirement       Configure one requirement (can be repeated multiple times)
  -e  --exclude           Exclude (ignore) requirement (can be repeated multiple times)
  -s  --silent            Suppress console outputs in favor of result codes
  --non-interactive       Run this command in non-interactive mode
  -V  --verbose           Verbose outputs for debug purposeEOF
  -h  --help              Print this message

Use: hub configure -r aws -r kubernetes   # to configure just one requirement 

Usage for stack requirements: [$(echo "$1" | xargs)]

EOF
  for req in $1; do
    if echo "$2" | grep -oh "\w*$req\w*"; then
      continue
    fi
    if test -f "$(dirname "$0")/$req/configure"; then
      $(dirname "$0")/$req/configure --help
    fi
  done
}

find_up () {
  path=$(pwd)
  while [[ "$path" != "" && ! -e "$path/$1" ]]; do
    path=${path%/*}
  done
  echo "$path/$1"
}

HUB_YAML="$(find_up "hub.yaml")"
if ! test -f "$HUB_YAML"; then
  echo "Cannot find $HUB_YAML file"
  exit 1
fi

VERBOSE=false
SILENT=false
HELP=false
ARGS=$*
if test -n "$(which tty)" && tty -s || echo "$-" | grep 'i'; then
  INTERACTIVE=true
else
  INTERACTIVE=false
fi

while [ "$1" != "" ]; do
  case $1 in
    --non-interactive ) 
      INTERACTIVE=false
      ;;  
    -r | --requirement ) 
      shift 
      REQS="$REQS $1" 
      ;;
    -e | --exclude )     
      shift 
      IGNORE="$IGNORE $1" 
      ;;
    -S | --silent )
      SILENT=true
      ;;
    -V | --verbose )
      VERBOSE=true
      ;;
    -h | --help )        
      HELP=true
      ARGS="--help"
      ;;
  esac
  shift
done

# too much output with this utility file
# source "$(dirname $0)/dotenv/dotenv"
# HACK: untill "source dotenv" will be fixed
dotenv=$(dirname "$0")/env/dotenv
if $VERBOSE; then
  set -x
fi

WORKDIR="$(dirname "$HUB_YAML")"
mkdir -p "$WORKDIR/.hub/env"
# common environment variables that 
# will be used by exact extensions
export WORKDIR SILENT VERBOSE INTERACTIVE

REQS=$(echo -e "$REQS" | xargs)
IGNORE=$(echo -e "$IGNORE" | xargs)
if test -z "$REQS"; then
  REQS=$(yq r "$HUB_YAML" -j | jq -r '.meta.configure?.requires? | .[]')
fi

if test -z "$ARGS" || $HELP; then
  usage "$REQS" "$IGNORE"
  exit
fi

echo "Configuring current stack for: $(echo "$REQS" | xargs)"

echo -n "Reading .env file: "
if test -f "$WORKDIR/.env"; then
  set +a
  eval $($dotenv export -f "$WORKDIR/.env" )
  set -a
  cat << EOF

* Cloud provider: $HUB_CLOUD_PROVIDER
* Stack domain name: $HUB_DOMAIN_NAME
EOF

  if test -L "$WORKDIR/.env"; then
    DOT_FILES=$(readlink -n "$WORKDIR/.env")
  else 
    DOT_FILES="$WORKDIR/.env"
  fi
else
  echo "not found"
  DOT_FILES=""
fi

# mkdir -p "$WORKDIR/.hub/configure"
# trap "rm -rf $WORKDIR/.hub/configure" EXIT

for req in $REQS; do
  if echo "$IGNORE" | grep -oh "\w*$req\w*"; then
    continue
  fi

  if test -f "$(dirname "$0")/$req/configure"; then
    # TEMP="$WORKDIR/.hub/configure/$req.env"
    TEMP=$(mktemp /tmp/superhub.XXXXXX) || exit 1
    trap "rm -f $TEMP" EXIT
    
    $(dirname "$0")/"$req"/configure --output "$TEMP" $ARGS
    if test -s "$TEMP"; then
      set +a
      eval $($dotenv export -f "$TEMP")
      set -a
      DOT_FILES="$DOT_FILES $TEMP"
    fi
  fi
done

echo "Finalizing env files..."
# TEMP="$WORKDIR/.hub/configure/.env"
TEMP=`mktemp /tmp/superhub.XXXXXX` || exit 1
trap "rm -f $TEMP" EXIT
$dotenv merge $(echo $DOT_FILES | sed 's/[^ ]* */-f &/g') > $TEMP
HUB_DOMAIN_NAME=${HUB_DOMAIN_NAME:-$($dotenv get "HUB_DOMAIN_NAME" -f "$TEMP")}
echo -n "* Saving configuration to .hub/env/$HUB_DOMAIN_NAME.env: "
$(dirname "$0")/env/copy "$TEMP" "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"

if test -L "$WORKDIR/.env" && test $(readlink -n "$WORKDIR/.env") != "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"; then
  unlink "$WORKDIR/.env"
fi
if test ! -f ".env"; then
  ln -sf "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env" "$WORKDIR/.env"
  echo "* Updated .env link to $HUB_DOMAIN_NAME.env"
fi

echo "Done!"
