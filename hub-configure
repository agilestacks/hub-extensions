#!/bin/bash -e
# shellcheck disable=SC2046,SC2068,SC2064,SC2086

usage() {
  cat << EOF
Reads configuration in hub.yaml and configures stack for deployment

Use: 
  hub configure -f hub.yaml -f params.yaml <parameters>

Common parameters:
  -f  --file              Path to stack definition file (can be repeated multiple times)
  -r  --requirement       Configure one requirement (can be repeated multiple times)
  -s  --silent            Suppress console outputs in favor of result codes
  -V  --verbose           Verbose outputs for debug purposeEOF
  -h  --help              Print this message

Use: hub configure -r aws -r kubernetes   # to configure just one requirement 

Usage for stack requirements: [$(echo "$1" | xargs)]

EOF
  for req in $1; do
    if echo "$2" | grep -oh "\w*$req\w*"; then
      continue
    fi
    if test -f "$(dirname "$0")/$req/configure"; then
      $(dirname "$0")/$req/configure --help
    fi
  done
}

# find_up () {
#   path=$(pwd)
#   while [[ "$path" != "" && ! -e "$path/$1" ]]; do
#     path=${path%/*}
#   done
#   echo "$path/$1"
# }

VERBOSE=false
SILENT=false
HELP=false
ARGS=$*

HUB_FILES=""
while [ "$1" != "" ]; do
  case $1 in
    -f | --file ) 
      shift
      HUB_FILES=$(echo "$HUB_FILES $1" | xargs)
      ;;
    # -C | --workdir ) 
    #   shift
    #   WORKDIR=$1
    #   ;;             
    -r | --requirement ) 
      shift 
      REQS="$REQS $1" 
      ;;
    -S | --silent )
      SILENT=true
      ;;
    -V | --verbose )
      VERBOSE=true
      ;;
    -h | --help )        
      HELP=true
      ARGS="--help"
      ;;
  esac
  shift
done

# too much output with this utility file
# source "$(dirname $0)/dotenv/dotenv"
# HACK: untill "source dotenv" will be fixed
dotenv=$(dirname "$0")/env/dotenv
if $VERBOSE; then
  set -x
fi

if test -z "$HUB_FILES"; then
  cat << EOF

Error: cannot find hub definition files

Full usage info:
  hub configure -f hub.yaml --help

Example:
  hub configure -f hub.yaml -f params.yaml

EOF
  exit 1
fi

TEMP_FILES=""
trap 'rm -f $TEMP_FILES' EXIT

download_file() {
  if test -f "$2"; then
    return
  fi

  local temp http_code
  temp=$(mktemp) || exit 1
  TEMP_FILES="$TEMP_FILES $temp"
  echo "  Downloading $(basename $2) from: $1"
  http_code=$(
    curl -sLo "$temp" -w "%{http_code}" "$1"
  )
  if test "$(echo $http_code | cut -c1-1)" != "2"; then
    echo "Error downloading url: $http_code"
    cat $temp
    return $http_code
  fi
  if test ! -s "$temp"; then
    echo "Error: have got empty file (url: $temp)"
    return 1
  fi
  echo -n "  Saving to $(pwd): "
  $(dirname "$0")/env/copy "$temp" "$2"
}

KNOWN_URLS=""
EXPANDED=""
expand_hub_files() {
  local f included local_file
  for f in $@; do
    if test -f "$f"; then
      EXPANDED=$(echo "$EXPANDED $f" | xargs)
      echo "  File $(basename $f): exist"
      included=$(yq r "$f" -j | jq -r '.extensions.include|select(.)[]')
      if test -n "$included"; then
        expand_hub_files $included
      fi
      continue
    fi
    # is url
    if echo "$f" | grep -e '^https\?://' >/dev/null 2>&1; then
      local_file="$WORKDIR/$(basename "$f")"
      if test ! -f "$local_file"; then
        download_file "$f" "$local_file"
        KNOWN_URLS=$(dirname $f | xargs)
      fi
      expand_hub_files "$local_file"
      continue
    fi

    for url in $KNOWN_URLS; do
      # shellcheck disable=SC2001
      if download_file "$url/$1" "$WORKDIR/$1"; then
        expand_hub_files "$WORKDIR/$1"
        break
      fi
    done

    if test ! -f "$f"; then
      echo "Error: $f not found!"
      exit 1
    fi
  done
}

if test -z "$WORKDIR"; then
  first=$(echo "$HUB_FILES" | awk '{print $1;}')
  if test -f $first; then
    WORKDIR=$(dirname "$FIRST_FILE")
  else
    WORKDIR=$(pwd)
  fi
fi

if test ! -d $WORKDIR; then
  mkdir -p "$WORKDIR"
fi

echo "Checking hub files:"
expand_hub_files $HUB_FILES
HUB_FILES="$EXPANDED"
mkdir -p "$WORKDIR/.hub/env"
# common environment variables that 
# will be used by exact extensions
export WORKDIR SILENT VERBOSE HUB_FILES
REQS=$(echo "$REQS" | xargs)
if test -z "$REQS"; then
  REQS=""
  for f in $HUB_FILES; do
    test -f $f || continue;
    REQS="$REQS $(yq r "$f" -j | jq -r '.extensions.configure? | select(.)[]')"
  done
  REQS=$(echo "$REQS" | xargs -n1)
fi

if test -z "$ARGS" || $HELP; then
  usage "$REQS"
  exit
fi

MERGE_FILES=""
echo -n "Reading .env file: "
if test -f "$WORKDIR/.env"; then
  set +a
  eval $($dotenv export -f "$WORKDIR/.env" )
  set -a
  cat << EOF

* Cloud provider: $HUB_CLOUD_PROVIDER
* Stack domain name: $HUB_DOMAIN_NAME
EOF

  if test -L "$WORKDIR/.env"; then
    MERGE_FILES="-f $(readlink -n "$WORKDIR/.env")"
  else 
    MERGE_FILES="-f $WORKDIR/.env"
  fi
else
  echo "to be created"
fi

echo "Apply configuration for: $(echo "$REQS" | xargs)"
for req in $(echo "$REQS" | xargs -n1); do
  if test -f "$(dirname "$0")/$req/configure"; then
    TEMP=$(mktemp) || exit 1
    TEMP_FILES="$TEMP_FILES $TEMP"
    $(dirname "$0")/"$req"/configure --output "$TEMP" $ARGS
    if test -s "$TEMP"; then
      set +a
      eval $($dotenv export -f "$TEMP")
      set -a
      MERGE_FILES="$MERGE_FILES -f $TEMP"
    fi
  fi
done

echo "Finalizing env files..."
TEMP1=$(mktemp) || exit 1
TEMP2=$(mktemp) || exit 1
TEMP_FILES="$TEMP_FILES $TEMP1 $TEMP2"

cat << EOF >> $TEMP2
# stack definition files
HUB_FILES="$HUB_FILES"
# deploy options can have value: (pod | toolbox | local)
HUB_DEPLOY_PROFILE="pod"
EOF
MERGE_FILES="$MERGE_FILES -f $TEMP2"
# shellcheck disable=SC2001
$dotenv merge $MERGE_FILES > $TEMP1
HUB_DOMAIN_NAME=$($dotenv -f "$TEMP1" get "HUB_DOMAIN_NAME" --default "$HUB_DOMAIN_NAME")
echo -n "* Saving configuration to .hub/env/$HUB_DOMAIN_NAME.env: "
$(dirname "$0")/env/copy "$TEMP1" "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"

if test -L "$WORKDIR/.env" && test $(readlink -n "$WORKDIR/.env") != "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"; then
  unlink "$WORKDIR/.env"
fi
if test ! -f ".env"; then
  ln -sf "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env" "$WORKDIR/.env"
  echo "* Updated .env link to $HUB_DOMAIN_NAME.env"
fi
echo "Done!"
