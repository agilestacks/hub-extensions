#!/bin/bash -e
# shellcheck disable=SC2046,SC2068

usage() {
  cat << EOF
Reads configuration in hub.yaml and configures stack for deployment

Use: 
  hub configure <parameters>

Common parameters:
  -r  --requirement       Configure one requirement (can be repeated multiple times)
  -e  --exclude           Exclude (ignore) requirement (can be repeated multiple times)
  -s  --silent            Suppress console outputs in favor of result codes
  -V  --verbose           Verbose outputs for debug purposeEOF
  -h  --help              Print this message

Use: hub configure -r aws -r kubernetes   # to configure just one requirement 

Usage for stack requirements: [$(echo "$1" | xargs)]

EOF
  for req in $1; do
    if echo "$2" | grep -oh "\w*$req\w*"; then
      continue
    fi
    if test -f "$(dirname "$0")/$req/configure"; then
      $(dirname "$0")/$req/configure --help
    fi
  done
}

find_up () {
  path=$(pwd)
  while [[ "$path" != "" && ! -e "$path/$1" ]]; do
    path=${path%/*}
  done
  echo "$path/$1"
}

HUB_YAML="$(find_up "hub.yaml")"
if ! test -f "$HUB_YAML"; then
  echo "Cannot find $HUB_YAML file"
  exit 1
fi

VERBOSE=false
SILENT=false
HELP=false
ARGS=$*
if test -n "$(which tty)" && tty -s || echo "$-" | grep 'i'; then
  INTERACTIVE=true
else
  INTERACTIVE=false
fi

while [ "$1" != "" ]; do
  case $1 in
    -r | --requirement ) 
      shift 
      REQS="$REQS $1" 
      ;;
    -e | --exclude )     
      shift 
      IGNORE="$IGNORE $1" 
      ;;
    -n | --non-interactive ) 
      INTERACTIVE=false
      ;;
    -S | --silent )
      SILENT=true
      ;;
    -V | --verbose )
      VERBOSE=true
      ;;
    -h | --help )        
      HELP=true
      ARGS="--help"
      ;;
  esac
  shift
done

# too much output with this utility file
# source "$(dirname $0)/dotenv/dotenv"
# HACK: untill "source dotenv" will be fiexed
dotenv=$(dirname "$0")/dotenv/dotenv

if $VERBOSE; then
  set -x
fi

WORKDIR="$(dirname "$HUB_YAML")"
DOT_ENV=$(mktemp /tmp/suprehub.XXXXXX) || exit 1

# shellcheck disable=SC2064
trap "rm -f $DOT_ENV" EXIT

mkdir -p "$WORKDIR/.hub/env"
# common environment variables that 
# will be used by exact extensions
export DOT_ENV HUB_YAML WORKDIR SILENT VERBOSE

REQS=$(echo -e "$REQS" | xargs)
IGNORE=$(echo -e "$IGNORE" | xargs)
if test -z "$REQS"; then
  REQS=$(yq r $WORKDIR/hub.yaml -j | jq -r '.requires | .[]')
fi

if test -z "$ARGS" || $HELP; then
  usage "$REQS" "$IGNORE"
  exit
fi

echo "Configuring current stack for: $(echo "$REQS" | xargs)"

echo -n "Reading .env file: "
if test -f "$WORKDIR/.env"; then
  $dotenv merge -f "$WORKDIR/.env" -f "$DOT_ENV" > "$DOT_ENV" 
  set +a
  eval $($dotenv export -f "$DOT_ENV" )
  set -a
  cat << EOF

* Cloud provider: $HUB_CLOUD_PROVIDER
* Stack domain name: $HUB_DOMAIN_NAME
EOF
else
  echo "not found"
fi

for req in $REQS; do
  if echo "$IGNORE" | grep -oh "\w*$req\w*"; then
    continue
  fi

  if test -f "$(dirname "$0")/$req/configure"; then
    # shellcheck disable=SC1090
    set +a
    eval $($dotenv export -f "$DOT_ENV")
    set -a
    # shellcheck disable=SC2086
    if $SILENT; then
      $(dirname "$0")/$req/configure $ARGS > /dev/null
    else
      $(dirname "$0")/$req/configure $ARGS
    fi
  fi
done

echo "Configuring environment variables"
FROM_ENVS=$(
  yq r params.yaml -j | jq -cr \
    '.parameters[] | select(.parameters).parameters[] | select(.fromEnv).fromEnv'
)
SHOW_MAN=true
for ENV in $FROM_ENVS; do
  VALUE=$($dotenv -f "$DOT_ENV" get "$ENV")
  if test -n "$VALUE"; then
    echo "* Environment variable $ENV: already configured"
    continue
  fi
  if $INTERACTIVE; then
    if $SHOW_MAN; then
      SHOW_MAN=false
      cat << EOF
You have been asked to enter a custom value for stack variable. 
The value will be stored in .env and can be modified in the future

Leave the value empty if you wish to assign a random generated!
EOF
    fi
    read -p "* Enter value for $ENV: " VALUE
  fi
  if test -z "$VALUE"; then
    VALUE=$(uuidgen | tr '[:upper:]' '[:lower:]' | tr -d -)
  fi
  echo "export $ENV=\"$VALUE\"" >> $DOT_ENV
  echo "* Value for $ENV stored in .env"
done

HUB_DOMAIN_NAME=${HUB_DOMAIN_NAME:-$($dotenv get "HUB_DOMAIN_NAME" -f "$DOT_ENV")}
echo "Finalizing env files..."
if ! test -f "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"; then
  cat "$DOT_ENV" > "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"
  echo "* Saving stack configuration to: $HUB_DOMAIN_NAME.env"
elif ! cmp -s "$DOT_ENV" "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"; then
  mv -f  "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env" "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env.bak"
  echo "* Backing up config: $HUB_DOMAIN_NAME.env.bak"
  cat "$DOT_ENV" > "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"
  echo "* Saving stack configuration to: $HUB_DOMAIN_NAME.env"
else
  echo "* .env file already exists and up to date"
fi

if test -L "$WORKDIR/.env" && test "$(readlink -n $WORKDIR/.env)" != "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"; then
  unlink "$WORKDIR/.env"
fi
if test ! -f ".env"; then
  ln -sf "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env" "$WORKDIR/.env"
  $SILENT || echo "* Updated .env link to $HUB_DOMAIN_NAME.env"
fi

echo "Done!"
