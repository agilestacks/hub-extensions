#!/bin/bash -e
# shellcheck disable=SC2046,SC2068,SC2064,SC2086

usage() {
  cat << EOF
Reads configuration in hub.yaml and configures stack for deployment

Use: 
  hub configure -f hub.yaml -f params.yaml <parameters>

Common parameters:
  -f  --file              Path to stack definition file (can be repeated multiple times)
  -r  --requirement       Configure one requirement (can be repeated multiple times)
  -s  --silent            Suppress console outputs in favor of result codes
  --non-interactive       Run this command in non-interactive mode
  -V  --verbose           Verbose outputs for debug purposeEOF
  -h  --help              Print this message

Use: hub configure -r aws -r kubernetes   # to configure just one requirement 

Usage for stack requirements: [$(echo "$1" | xargs)]

EOF
  for req in $1; do
    if echo "$2" | grep -oh "\w*$req\w*"; then
      continue
    fi
    if test -f "$(dirname "$0")/$req/configure"; then
      $(dirname "$0")/$req/configure --help
    fi
  done
}

find_up () {
  path=$(pwd)
  while [[ "$path" != "" && ! -e "$path/$1" ]]; do
    path=${path%/*}
  done
  echo "$path/$1"
}

VERBOSE=false
SILENT=false
HELP=false
ARGS=$*
if test -n "$(which tty)" && tty -s || echo "$-" | grep 'i'; then
  INTERACTIVE=true
else
  INTERACTIVE=false
fi

HUB_FILES=""
while [ "$1" != "" ]; do
  case $1 in
    --non-interactive ) 
      INTERACTIVE=false
      ;;
    -f | --file ) 
      shift
      if test ! -f "$1"; then
        echo "Error: cannot find file $1"
        exit 1
      fi
      HUB_FILES="$(echo "$HUB_FILES $1" | xargs)"
      ;;           
    -r | --requirement ) 
      shift 
      REQS="$REQS $1" 
      ;;
    -S | --silent )
      SILENT=true
      ;;
    -V | --verbose )
      VERBOSE=true
      ;;
    -h | --help )        
      HELP=true
      ARGS="--help"
      ;;
  esac
  shift
done

# too much output with this utility file
# source "$(dirname $0)/dotenv/dotenv"
# HACK: untill "source dotenv" will be fixed
dotenv=$(dirname "$0")/env/dotenv
if $VERBOSE; then
  set -x
fi

if test -z "$HUB_FILES"; then
  cat << EOF

Error: cannot find hub definition files

Full usage info:

EOF
  usage
  exit 1

  cat << EOF

Full usage info:
  hub configure -f hub.yaml --help

Example:
  hub configure -f hub.yaml -f params.yaml

EOF

else
  FIRST_FILE=$(echo "$HUB_FILES" | awk '{print $1;}')
  WORKDIR=$(dirname "$FIRST_FILE")
fi

mkdir -p "$WORKDIR/.hub/env"
# common environment variables that 
# will be used by exact extensions
export WORKDIR SILENT VERBOSE INTERACTIVE HUB_FILES

REQS=$(echo -e "$REQS" | xargs)
if test -z "$REQS"; then
  REQS=""
  for f in $HUB_FILES; do
    test -f $f || continue;
    REQS="$REQS $(yq r "$f" -j | jq -r '.extensions.configure? | select(.)[]')"
  done
  REQS=$(echo "$REQS" | xargs -n1)
fi

if test -z "$ARGS" || $HELP; then
  usage "$REQS"
  exit
fi

echo "Configuring current stack for: $(echo "$REQS" | xargs)"

echo -n "Reading .env file: "
if test -f "$WORKDIR/.env"; then
  set +a
  eval $($dotenv export -f "$WORKDIR/.env" )
  set -a
  cat << EOF

* Cloud provider: $HUB_CLOUD_PROVIDER
* Stack domain name: $HUB_DOMAIN_NAME
EOF

  if test -L "$WORKDIR/.env"; then
    DOT_FILES=$(readlink -n "$WORKDIR/.env")
  else 
    DOT_FILES="$WORKDIR/.env"
  fi
else
  echo "to be created"
  DOT_FILES=""
fi

# mkdir -p "$WORKDIR/.hub/configure"
# trap "rm -rf $WORKDIR/.hub/configure" EXIT

for req in $(echo "$REQS" | xargs -n1); do
  if test -f "$(dirname "$0")/$req/configure"; then
    TEMP=$(mktemp /tmp/superhub.XXXXXX) || exit 1
    trap "rm -f $TEMP" EXIT
    
    $(dirname "$0")/"$req"/configure --output "$TEMP" $ARGS
    if test -s "$TEMP"; then
      set +a
      eval $($dotenv export -f "$TEMP")
      set -a
      DOT_FILES="$DOT_FILES $TEMP"
    fi
  fi
done

echo "Finalizing env files..."
TEMP=$(mktemp /tmp/superhub.XXXXXX) || exit 1
trap "rm -f $TEMP" EXIT
TEMP2=$(mktemp /tmp/superhub.XXXXXX) || exit 1
trap "rm -f $TEMP2" EXIT
echo "# current stack definition" > $TEMP2
echo "HUB_FILES=\"$HUB_FILES\"" >> $TEMP2
# shellcheck disable=SC2001
$dotenv merge $(echo $DOT_FILES | sed 's/[^ ]* */-f &/g') -f $TEMP2 > $TEMP
HUB_DOMAIN_NAME=${HUB_DOMAIN_NAME:-$($dotenv get "HUB_DOMAIN_NAME" -f "$TEMP")}
echo -n "* Saving configuration to .hub/env/$HUB_DOMAIN_NAME.env: "
$(dirname "$0")/env/copy "$TEMP" "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"

if test -L "$WORKDIR/.env" && test $(readlink -n "$WORKDIR/.env") != "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"; then
  unlink "$WORKDIR/.env"
fi
if test ! -f ".env"; then
  ln -sf "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env" "$WORKDIR/.env"
  echo "* Updated .env link to $HUB_DOMAIN_NAME.env"
fi

echo "Done!"
