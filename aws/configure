#!/bin/bash -e
# shellcheck disable=SC2046,SC2086

usage() {
  cat << EOF
AWS parameters:
  --aws-region            AWS Region (defaults to value from: AWS_REGION)
  --aws-profile           AWS Profile (defaults to value from: AWS_PROFILE)
  --dry-run               Do not deploy cloud resources
  --domain-name           Previously issued DNS name
  --bubbles-secret-key    Secret key issued with new DNS name
  --prefer-local          Deploy state locally only

Bubble DNS parameters:
  --dns-new     Request new DNS domain
  --dns-update  Request to update DNS registration

  New DNS record request:
    --parent-domain       Parent domain for stack (defaults to: bubble.superhub.io)

  Request to update DNS record:
    --domain-name         Previously issued DNS name
    --bubbles-secret-key  Secret key passed during domain name creation

  Use: hub configure -f hub.yaml -f params.yaml -r dns --dns-update

EOF
}

HUB_PARENT_DOMAIN=${HUB_PARENT_DOMAIN:-"bubble.superhub.io"}
FLAGS=$*
DRY_RUN=false
DNS_MANAGER="bubbles"
PREFER_LOCAL_STATE=false
while [ "$1" != "" ]; do
  case $1 in
    --aws-region )      shift
                        AWS_REGION="$1"
                        ;;
    --aws-profile )     shift
                        AWS_PROFILE="$1"
                        ;;
    --domain-name ) 
      shift
      HUB_DOMAIN_NAME="$1"
      ;;
    --bubbles-secret-key ) 
      shift
      HUB_DOMAIN_SECRET="$1"
      ;;
    --prefer-local )
      PREFER_LOCAL_STATE=true
    ;;
    --dns-update )      DNS_ACTION="update"
                        ;;
    --dry-run )         DRY_RUN=true
                        ;;
    --output )          shift
                        DOT_ENV="$1"
                        ;;
    -h | --help )       usage
                        exit
                        ;;
  esac
  shift
done

if test $VERBOSE = "true"; then
  set -x
fi

if test -z "$DOT_ENV"; then
  echo "Error: please run with option: $(dirname "0")/$(basename "0") --output FILE "
  exit 2
fi

dotenv="$(dirname $(dirname $0))/env/dotenv -f $DOT_ENV"
updateBubbleDNS() {
  local domain secret
  domain="$1"
  secret="$2"
  if test -z "$domain"; then
    echo "Error: cannot find configuration 'domain name'"
    exit 1
  fi
  if test -z "$secret"; then
    secret=$($dotenv get "HUB_DOMAIN_SECRET")
    if test -z "$secret"; then
      echo "Error: cannot find configuration 'dns secret key'"
    fi
    exit 1
  fi
  echo -n "* Sending request to update $HUB_DOMAIN_NAME record: "
  $(dirname $(dirname "$0"))/bubble-dns/update --domain-name "$domain" --secret-key "$secret"
}

if test "$DNS_ACTION" = "update"; then
  updateBubbleDNS "$HUB_DOMAIN_NAME" "$HUB_DOMAIN_SECRET"
  exit $?
fi

if test -z "$HUB_DOMAIN_NAME"; then
  echo "Configuring Bubble DNS"
  $(dirname $(dirname "$0"))/bubble-dns/new --output "$DOT_ENV" $FLAGS
  # Reading newly generated domain name by script above
  HUB_DOMAIN_NAME=$($dotenv get "HUB_DOMAIN_NAME")
  HUB_DOMAIN_SECRET=$($dotenv get "HUB_DOMAIN_SECRET")
  if test -z "$HUB_DOMAIN_NAME"; then
    echo "Error: cannot find domain name: [$HUB_DOMAIN_NAME]"
    exit 1
  fi
elif test -z "$HUB_DOMAIN_SECRET"; then
  DNS_MANAGER="user"
  echo "* Using domain name provided by user: $HUB_DOMAIN_NAME"
fi

echo "Configuring AWS S3"
AWS_PROFILE=${AWS_PROFILE:-$(echo "$AWS_DEFAULT_PROFILE default" | awk '{print $1;}')}
if aws --profile $AWS_PROFILE configure list > /dev/null 2>&1; then
  AWS_OPTS="$AWS_OPTS --profile $AWS_PROFILE"
  echo "* Using AWS profile: $AWS_PROFILE"
else
  unset AWS_DEFAULT_PROFILE AWS_PROFILE
fi

if test -z "$AWS_REGION"; then
  if test -n "$AWS_DEFAULT_REGION"; then
    AWS_REGION="$AWS_DEFAULT_REGION"
    unset AWS_DEFAULT_REGION
  else
    AWS_REGION=$(aws $AWS_OPTS configure get region || echo "us-east-1")
  fi
fi

echo "* Using AWS region: $AWS_REGION"

export AWS_PROFILE AWS_RsEGION

if test -z "$HUB_STATE_BUCKET"; then
  AWS_ACCOUNT="$(aws $AWS_OPTS sts get-caller-identity --query 'Account' --output text)"
  HUB_STATE_BUCKET="$AWS_ACCOUNT.superhub.io"
fi

echo -n "* Checking presence of bucket $HUB_STATE_BUCKET: "
if aws $AWS_OPTS s3api head-bucket --bucket=$HUB_STATE_BUCKET > /dev/null 2>&1; then
  HUB_STATE_REGION="$(
    aws $AWS_OPTS s3api get-bucket-location \
      --bucket="$HUB_STATE_BUCKET" --query 'LocationConstraint' \
      --output text \
      | sed -e 's/None/us-east-1/g')"
  echo "exist"
else
  if test -z "$HUB_STATE_REGION"; then
    HUB_STATE_REGION="$AWS_REGION"
  fi
  if $DRY_RUN; then
    echo "will be deployed"
  else
    echo "not found"
    echo -n "* Deployng S3 bucket $HUB_STATE_BUCKET: "
    $(dirname "$0")/s3-bucket/deploy \
      --bucket-name "$HUB_STATE_BUCKET" \
      --aws-region "$AWS_REGION" \
      --acl "private" || exit 1
  fi
fi

echo "Configuring AWS Route53"
echo -n "* Checking presence of hosted zone $HUB_DOMAIN_NAME: "
ZONE_ID=$($(dirname $0)/route53/zone-id --domain-name $HUB_DOMAIN_NAME)
if test -z "$ZONE_ID"; then
  echo "not found"
else
  echo "$ZONE_ID"
fi

if $DRY_RUN; then
  echo "* Dry run mode detected: skipping route53 modification"
elif test "$DNS_MANAGER" = "bubbles"; then
  if test -z "$ZONE_ID"; then
    echo -n "* Deploying hosted zone $HUB_DOMAIN_NAME (takes a minute)... "
    $(dirname "$0")/route53/deploy --domain-name "$HUB_DOMAIN_NAME"
  fi
elif test "$DNS_MANAGER" = "user"; then
  PARENT_DOMAIN="$(echo $HUB_DOMAIN_NAME | cut -d. -f2-)"
  echo -n "* Checking presence of parent hosted zone $PARENT_DOMAIN: "
  PARENT_ZONE_ID="$($(dirname "$0")/route53/zone-id --domain-name "$PARENT_DOMAIN")"
  if test -z "$ZONE_ID"; then
    if test -z "$PARENT_ZONE_ID"; then
      echo "not found"
      cat << EOF

Error!
Route 53 hosted zone $HUB_DOMAIN_NAME has not been found. 

You can resolve this error by logging in https://console.aws.amazon.com/route53/ 
and create a hosted zone "$HUB_DOMAIN_NAME."

Then run again:

$ hub configure -r aws --domain-name $HUB_DOMAIN_NAME

Abort!
EOF
      exit 5
    fi
    echo "$PARENT_ZONE_ID"
    echo -n "* Deploying hosted zone $HUB_DOMAIN_NAME (takes a minute)... "
    $(dirname "$0")/route53/deploy --domain-name "$HUB_DOMAIN_NAME"
    echo "Done"
  fi
  echo -n "* Updating $HUB_DOMAIN_NAME NS record to zone $PARENT_ZONE_ID (takes a minute)... "
  $(dirname "$0")/route53/upsert-ns \
    --dest-zone-id "$PARENT_ZONE_ID" \
    --ns-record-name "$HUB_DOMAIN_NAME"  \
    --ns-record-tty "300"
  echo "Done"
  # make sure .env file is up-to-date
  $dotenv set "HUB_DOMAIN_NAME=\"$HUB_DOMAIN_NAME\""
  $dotenv set "HUB_STACK_NAME=\"$(echo "$HUB_DOMAIN_NAME" | cut -f1 -d.)\""
else
  echo "Error: unsupported DNS operation"
  exit 6
fi

$dotenv set 'HUB_CLOUD_PROVIDER="aws"'
test -z "$AWS_PROFILE"      || $dotenv set "AWS_PROFILE=\"$AWS_PROFILE\""
test -z "$AWS_REGION"       || $dotenv set "AWS_REGION=\"$AWS_REGION\""
test -z "$HUB_STATE_BUCKET" || $dotenv set "HUB_STATE_BUCKET=\"$HUB_STATE_BUCKET\""
test -z "$HUB_STATE_REGION" || $dotenv set "HUB_STATE_REGION=\"$HUB_STATE_REGION\""

if ! $DRY_RUN && test -n "$HUB_DOMAIN_SECRET"; then
  updateBubbleDNS "$HUB_DOMAIN_NAME" "$HUB_DOMAIN_SECRET"
  cat << EOF
* DNS record has time to live: 72 hours (use hub configure to refresh)

# Hint! To refresh DNS: hub configure -r aws --dns-update

EOF
fi

if test -z "$HUB_STATE"; then
  echo "* Setting default location for hub state file"
  STACK=${STACK:-$(basename "$(pwd)")}
  HUB_STATE_FILE=".hub/$HUB_DOMAIN_NAME.state"
  if $PREFER_LOCAL_STATE; then
    $dotenv set "HUB_STATE=\"$HUB_STATE_FILE\""
  else
    HUB_STATE_S3="s3://$HUB_STATE_BUCKET/$HUB_DOMAIN_NAME/hub/$STACK/hub.state"
    $dotenv set "HUB_STATE=\"$HUB_STATE_FILE,$HUB_STATE_S3\""
  fi
fi

if test -z "$HUB_ELABORATE"; then
  echo "* Setting default location for hub elaborate file"
  STACK=${STACK:-$(basename "$(pwd)")}
  HUB_ELABORATE_FILE=".hub/$HUB_DOMAIN_NAME.elaborate"
  if $PREFER_LOCAL_STATE; then
    $dotenv set "HUB_ELABORATE=\"$HUB_ELABORATE_FILE\""
  else
    HUB_ELABORATE_S3="s3://$HUB_STATE_BUCKET/$HUB_DOMAIN_NAME/hub/$STACK/hub.elaborate"
    $dotenv set "HUB_ELABORATE=\"$HUB_ELABORATE_FILE,$HUB_ELABORATE_S3\""
  fi
fi
