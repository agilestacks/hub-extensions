#!/bin/bash -e

usage() {
cat << EOF

Deploys this stack

Usage:
$ $(basename "$0")

Deploys all components

$ $(basename "$0") -c component1,component2
Deploys deploys two components

Parameters:
    -c --components       List of components to deploy
    --profile             Can be: deploy-pod (default) | deploy-local | deploy-toolbox
    -o --offset           Deploy starting with the given component
    -s --silent           Suppress console outputs in favor of result codes
    -p --no-precheck      Skip `hub ext aws status` command execution
    -P --deploy-prereqs   Deploy prerequisites if one or few has not been met
    --skip-guide          Suppress "What's next messages"
    -V  --verbose         Verbose outputs for debug purpose
    -h  --help            Print this message

EOF
}

FULL_STACK=true

dotenv="$(dirname "$0")/env/dotenv -f .env"
set +a
eval "$($dotenv "export")"
set -a

while test "$1" != ""; do
    case $1 in
        -c | --component )  shift
                            HUB_DEPLOY_OPTS="$HUB_DEPLOY_OPTS -c $1"
                            FULL_STACK=false
                            ;;
        -o | --offset )     shift
                            HUB_DEPLOY_OPTS="$HUB_DEPLOY_OPTS -o $1"
                            FULL_STACK=false
                            ;;
        --profile )         shift
                            HUB_DEPLOY_PROFILE="$1"
                            ;;
        -V | --verbose )    set -x
                            ;;
        -h | --help )       usage
                            exit
                            ;;
        * )                 usage
                            exit 1
    esac
    shift
done

if test ! -f .env; then
cat << EOF
Stack configuration (.env)

To resolve please run:
  $ hub configure -f hub.yaml -f params.yaml

To explore more configuration options:
  $ hub configure -f hub.yaml -f params.yaml --help

EOF
  exit 1
fi


if test -z "$HUB_FILES"; then
  cat << EOF 
Error: cannot find hub definition files (HUB_FILES) in .env"

Probably because stack has not been configured for deployment yet!

Example:
  $ hub configure -f hub.yaml -f params.yaml

To explore more configuration options:
  $ hub configure -f hub.yaml -f params.yaml --help

EOF

  exit 2
fi

if test -z "$HUB_DOMAIN_NAME"; then
  echo "Error: HUB_DOMAIN_NAME has not been defined"
  exit 2
fi

cat << EOF
Starting deployment:
* Using domain name: $HUB_DOMAIN_NAME
* Using kubeconfig: $KUBECONFIG

EOF

HUB=${HUB:-hub}
HUB_ELABORATE_FILE="${HUB_ELABORATE_FILE:-".hub/$HUB_DOMAIN_NAME.elaborate"}"
HUB_STATE_FILE="${HUB_STATE_FILE:-".hub/$HUB_DOMAIN_NAME.state"}"

if test -f "$HUB_STATE_FILE"; then
  HUB_ELABORATE_OPTS="$HUB_ELABORATE_OPTS -s $HUB_STATE_FILE"
fi

if test -n "$CLOUD_PROVIDER"; then
  HUB_DEPLOY_OPTS="--clouds=$CLOUD_PROVIDER $HUB_DEPLOY_OPTS"
fi

# shellcheck disable=SC2086
if $FULL_STACK || test ! -f "$HUB_ELABORATE_FILE"; then
  $HUB stack elaborate
fi

export HUB_YAML HUB_FILES HUB_STATE_FILE HUB_ELABORATE_FILE

for f in $HUB_FILES; do
  test -f $f || continue;
  BEFORE="$BEFORE $(yq r "$f" -j | jq -r '.extensions.deploy.before? | select(.)[]')"
done
if test -n "$BEFORE"; then
  echo "Running before deployment extensions: $BEFORE"
  for i in $(echo "$BEFORE" | xargs -n1); do
    if test -f "$(dirname "$0")/$i/before-deploy"; then
      "$(dirname "$0")/$i/before-deploy"
    fi
  done
fi

if test -z "$HUB_DEPLOY_PROFILE"; then
  HUB_DEPLOY_PROFILE=$($dotenv get "HUB_DEPLOY_PROFILE")
  if test -z "$HUB_DEPLOY_PROFILE"; then
    HUB_DEPLOY_PROFILE="deploy-pod"
  fi
fi
if test ! -f "$(dirname "$0")/$HUB_DEPLOY_PROFILE/deploy"; then
  echo "Warning: $(dirname "$0")/$HUB_DEPLOY_PROFILE/deploy not found!"
  echo "Falling back to $(dirname "$0")/deploy-local/deploy"
  HUB_DEPLOY_PROFILE="deploy-local"
fi

# shellcheck disable=SC2086,SC2046
$(dirname "$0")/$HUB_DEPLOY_PROFILE/deploy \
  "$HUB_ELABORATE_FILE" \
  -s "$HUB_STATE_FILE" \
  $HUB_DEPLOY_OPTS

for f in $HUB_FILES; do
  test -f "$f" || continue;
  AFTER="$AFTER $(yq r "$f" -j | jq -r '.extensions.deploy.after? | select(.)[]')"
done
if test -n "$AFTER"; then
  echo "Running post deployment extensions: $AFTER"
  for i in $(echo "$AFTER" | xargs -n1); do
    if test -f "$(dirname "$0")/$i/after-deploy"; then
      "$(dirname "$0")/$i/after-deploy"
    fi
  done
fi
