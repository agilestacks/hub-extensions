#!/bin/bash -e

usage() {
cat << EOF

Deploys this stack

Usage:
$ $(basename "$0")

Deploys all components

$ $(basename "$0") -c component1,component2
Deploys deploys two components

Parameters:
    -c --components       List of components to deploy
    -t --with-toollbox    Use toolbox image to run deployment
                          also enabled by setting HUB_TOOLBOX to non empty
    -o --offset           Deploy starting with the given component
    -s --silent           Suppress console outputs in favor of result codes
    -p --no-precheck      Skip `hub ext aws status` command execution
    -P --deploy-prereqs   Deploy prerequisites if one or few has not been met
    --skip-guide          Suppress "What's next messages"
    -V  --verbose         Verbose outputs for debug purpose
    -h  --help            Print this message

EOF
}

FULL_STACK=true
while test "$1" != ""; do
    case $1 in
        -c | --component )  shift
                            HUB_DEPLOY_OPTS="$HUB_DEPLOY_OPTS -c $1"
                            FULL_STACK=false
                            ;;
        -o | --offset )     shift
                            HUB_DEPLOY_OPTS="$HUB_DEPLOY_OPTS -o $1"
                            FULL_STACK=false
                            ;;
        -V | --verbose )    set -x
                            ;;
        -h | --help )       usage
                            exit
                            ;;
        * )                 usage
                            exit 1
    esac
    shift
done

if test ! -f .env; then
cat << EOF
Configuration has not been found. To resolve please run:

$ hub configure --current-kubecontext

EOF
  exit 1
fi
dotenv=$(dirname "$0")/env/dotenv
set +a
eval "$($dotenv export -f ".env" )"
set -a

if test -z "$HUB_DOMAIN_NAME"; then
  echo "Error: HUB_DOMAIN_NAME has not been defined"
  exit 2
fi

cat << EOF
Starting deployment:
* Using domain name: $HUB_DOMAIN_NAME
* Using kubeconfig: $KUBECONFIG

EOF

HUB=${HUB:-hub}
HUB_ELABORATE_FILE="${HUB_ELABORATE_FILE:-".hub/$HUB_DOMAIN_NAME.elaborate"}"
HUB_STATE_FILE="${HUB_STATE_FILE:-".hub/$HUB_DOMAIN_NAME.state"}"

if test -f "$HUB_STATE_FILE"; then
  HUB_ELABORATE_OPTS="$HUB_ELABORATE_OPTS -s $HUB_STATE_FILE"
fi

if test -n "$CLOUD_PROVIDER"; then
  HUB_DEPLOY_OPTS="--clouds=$CLOUD_PROVIDER $HUB_DEPLOY_OPTS"
fi

# shellcheck disable=SC2086
if $FULL_STACK || test ! -f "$HUB_ELABORATE_FILE"; then
  $HUB stack elaborate
fi

# shellcheck disable=SC2086
if test -n "$HUB_TOOLBOX"; then
  $HUB toolbox \
    /bin/bash -c "
    . .env; \
    hub deploy $HUB_ELABORATE_FILE -s $HUB_STATE_FILE $HUB_DEPLOY_OPTS;
    "
else
  hub deploy "$HUB_ELABORATE_FILE" -s "$HUB_STATE_FILE" $HUB_DEPLOY_OPTS
fi

ns=kube-system
cm=superhub
explained=$($HUB explain --json -g $HUB_STATE_FILE | base64 | tr -d \\n)

#TODO: this should go to the hub extension
(
if kubectl -n $ns get configmap $cm >/dev/null 2>&1; then
  kubectl -n $ns get configmap $cm -o json |
    jq ".data += {\"${HUB_DOMAIN_NAME}\": \"${explained}\"}" |
    kubectl -n $ns replace -f -
else
  kubectl -n $ns create configmap $cm --from-literal=${HUB_DOMAIN_NAME}=${explained}
fi
) 2>&1 | grep -v 'configmap/superhub created'
