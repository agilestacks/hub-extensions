#!/bin/bash -e

usage() {
# shellcheck disable=SC2006
cat << EOF

Deploys this stack

Usage:
$ hub stack deploy
Deploys all components

$ hub stack deploy -c component1,component2
Deploys deploys two components

$ hub stack deploy -c component1,component2 --profile pod
Deploys deploys two components and executes deployment in a pod

Parameters:
    -c --component        List of components to deploy
    --profile             Can be: pod | local
    -o --offset           Deploy starting with the given component
    -l --limit            Component to stop deploy at
    -V  --verbose         Verbose outputs for debug purpose
    --tty                 Use TTY (terminal) mode for hub deploy
    --no-tty              Do not use TTY (terminal) mode for hub deploy
    --                    Separator to define "hub deploy" low level parameters (see: "hub deploy --help")
    -h  --help            Print this message

EOF
}

FULL_STACK=true
dotenv="$(dirname "$0")/env/dotenv -f .env"
eval "$($dotenv "export")"

HUB_OPTS=
while test "$1" != ""; do
    case $1 in
        -c | --component )  shift
                            HUB_OPTS="$HUB_OPTS -c $1"
                            FULL_STACK=false
                            ;;
        -o | --offset )     shift
                            HUB_OPTS="$HUB_OPTS -o $1"
                            FULL_STACK=false
                            ;;
        -l | --limit )      shift
                            HUB_OPTS="$HUB_OPTS -l $1"
                            FULL_STACK=false
                            ;;
        --tty )             HUB_OPTS="$HUB_OPTS --tty true"
                            ;;
        --no-tty )          HUB_OPTS="$HUB_OPTS --tty false"
                            ;;
        --profile )         shift
                            export HUB_DEPLOY_PROFILE="$1"
                            ;;
        -V | --verbose )    set -x
                            ;;
        -h | --help )       usage
                            exit
                            ;;
        -- )                shift
                            HUB_OPTS="$HUB_OPTS $@"
                            break
                            ;;
        * )                 usage
                            exit 1
    esac
    shift
done

if test ! -f .env; then
cat << EOF
Stack configuration (.env)

To resolve please run:
  $ hub configure -f hub.yaml

To explore more configuration options:
  $ hub configure -f hub.yaml --help

EOF
  exit 1
fi

if test -z "$HUB_FILES"; then
  cat << EOF
Error: cannot find hub definition files (HUB_FILES) in .env"

Probably because stack has not been configured for deployment yet!

Example:
  $ hub configure -f hub.yaml

To explore more configuration options:
  $ hub configure -f hub.yaml --help

EOF

  exit 2
fi

if test -z "$HUB_DOMAIN_NAME"; then
  echo "Error: HUB_DOMAIN_NAME has not been defined"
  exit 2
fi

cat << EOF
Starting deployment:
* Using domain name: $HUB_DOMAIN_NAME
EOF

hub_kubeconfig=$($dotenv get "HUB_KUBECONFIG")
if test -n "$hub_kubeconfig"; then
  KUBECONFIG=$($dotenv get "HUB_KUBECONFIG" --default "$KUBECONFIG")
  export KUBECONFIG
  echo "* Using kubeconfig: $KUBECONFIG"
fi

HUB=${HUB:-hub}

if test -z "$HUB_STATE"; then
  HUB_STATE=".hub/$HUB_DOMAIN_NAME.state"
fi
echo "* Using hub state:"
# shellcheck disable=SC2001
for i in $(echo "$HUB_STATE" | sed "s/,/ /g"); do
  echo "  - $i"
done

if test -z "$HUB_ELABORATE"; then
  HUB_ELABORATE=".hub/$HUB_DOMAIN_NAME.elaborate"
fi
echo "* Using hub elaborate:"
# shellcheck disable=SC2001
for i in $(echo "$HUB_ELABORATE" | sed "s/,/ /g"); do
  echo "  - $i"
  if ! grep :// <<<$i >/dev/null; then
    HUB_ELABORATE_FILE=$i
  fi
done

if test -z "$HUB_CLOUD_PROVIDER"; then
  HUB_DEPLOY_PROFILE=$($dotenv get "HUB_CLOUD_PROVIDER")
fi
if test -n "$HUB_CLOUD_PROVIDER"; then
  HUB_OPTS="--clouds=$HUB_CLOUD_PROVIDER $HUB_OPTS"
fi

# shellcheck disable=SC2086
if $FULL_STACK || test -n $"$HUB_ELABORATE_FILE" -a ! -e "$HUB_ELABORATE_FILE"; then
  "$(dirname "$0")/hub-stack-elaborate"
fi

export HUB_YAML HUB_FILES HUB_STATE HUB_ELABORATE

for f in $HUB_FILES; do
  test -f "$f" || continue;
  BEFORE="$BEFORE $(yq e '.extensions.deploy.before.[]' $f)"
  AFTER="$AFTER $(yq e '.extensions.deploy.after.[]' $f)"
done

for i in $(echo "$BEFORE" | xargs -n1); do
  if test -f "$WORKDIR/.hub/$i/before-deploy"; then
    hook="$WORKDIR/.hub/$i/before-deploy"
  elif test -f "$(dirname "$0")/$i/before-deploy"; then
    hook="$(dirname "$0")/$i/before-deploy"
  else
    echo "Warning! cannot find before deploy hook: $i"
    continue
  fi
  echo "Running before deploy: $i"
  $hook
done

if test -z "$HUB_DEPLOY_PROFILE"; then
  HUB_DEPLOY_PROFILE=$($dotenv get "HUB_DEPLOY_PROFILE" --default "pod")
fi

script_dir=$(dirname "$0")
if test -f "$WORKDIR/.hub/profiles/$HUB_DEPLOY_PROFILE/deploy"; then
  deploy="$WORKDIR/.hub/profiles/$HUB_DEPLOY_PROFILE/deploy"
elif test -f "$script_dir/profiles/$HUB_DEPLOY_PROFILE/deploy"; then
  deploy="$script_dir/profiles/$HUB_DEPLOY_PROFILE/deploy"
else
  # shellcheck disable=SC2046
  if test -d "$WORKDIR/.hub/profiles"; then profiles="$profiles $(ls "$WORKDIR/.hub/profiles")"; fi
  if test -d "$script_dir/profiles"; then profiles="$profiles $(ls $script_dir/profiles)"; fi
  cat << EOF

Error! Cannot find deployment profile $HUB_DEPLOY_PROFILE
* Not found: $WORKDIR/.hub/profiles/$HUB_DEPLOY_PROFILE/deploy
* Not found: $script_dir/profiles/$HUB_DEPLOY_PROFILE/deploy

Deployment profile configured via .env variable HUB_DEPLOY_PROFILE

Currently supported profiles: $(echo "$profiles" | xargs)

Completed with errors!
EOF
  exit 5
fi

cat << EOF

Proceeding with: deploy
* Using profile: $HUB_DEPLOY_PROFILE
* Running CLI command:

  $ hub deploy $HUB_ELABORATE -s $HUB_STATE $HUB_OPTS

EOF

# shellcheck disable=SC2086,SC2046
$deploy "$HUB_ELABORATE" -s "$HUB_STATE" $HUB_OPTS
for i in $(echo "$AFTER" | xargs -n1); do
  if test -f "$WORKDIR/.hub/$i/after-deploy"; then
    hook="$WORKDIR/.hub/$i/after-deploy"
  elif test -f "$(dirname "$0")/$i/after-deploy"; then
    hook="$(dirname "$0")/$i/after-deploy"
  else
    echo "Warning! cannot find post hook: $i"
    continue
  fi
  echo "Running after deploy hook: $i"
  $hook
done

echo
echo "Done!"
