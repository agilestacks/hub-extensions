#!/bin/bash -e

usage() {
    cat << EOF

Helper tool that create remote toolbox enviroment

Usage: 
$ $(basename "$0") --create-toolbox
Create remote toolbox on kuberentes cluster

Parameters:
    -c --create-toolbox   Create toolbox
    -g --get-stack-state  Get stack state
    -d --delete-toolbox   Deletes deployed toolbox 
    --get-namespace       Get toolbox namespace
    --get-podname         Get toolbox pod name
    --skip-guide          Suppress "What's next messages"
    -V  --verbose         Verbose outputs for debug purpose
    -h  --help            Print this message

EOF
}

generate_manifests() {
    trap "rm -rf $KUSTOMIZE_DIR" EXIT

    envfile="$KUSTOMIZE_DIR/envfile"
    env | grep -E '^(AWS_|GOOGLE_|AZURE_|TF_|TERM=|LANG=|LC_)' >"$envfile"
    kustomize_manifest="$KUSTOMIZE_DIR/kustomization.yaml"

    cat <<EOF > $kustomize_manifest
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
commonLabels:
  app: toolbox
  provider: agilestacks.com
configMapGenerator:
- name: toolbox-env
  namespace: $K8S_NAMESPACE
  env: envfile
- name: user-group
  namespace: $K8S_NAMESPACE
  literals:    
  - USER=$USER
  - UID=$(id -u)
  - GID=$(id -g)
resources:
- deployment.yaml
EOF

pod_manifest="$KUSTOMIZE_DIR/deployment.yaml"
cat <<EOF > $pod_manifest
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: toolbox
  namespace: $K8S_NAMESPACE
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: toolbox-sa
subjects:
- kind: ServiceAccount
  name: toolbox
  namespace: $K8S_NAMESPACE
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: toolbox
  namespace: $K8S_NAMESPACE
spec:
  serviceAccountName: toolbox
  containers:
  - name: toolbox
    image: $IMAGE:$IMAGE_VERSION
    command: ["bash", "-c", "hub extensions install && sleep infinity"]    
    envFrom:
        - configMapRef:
            name: toolbox-env
        - configMapRef:
            name: user-group
EOF
}

deploy_toolbox() {
    $SILENT || echo 'Deploying toolbox container'

    kubectl kustomize ${KUSTOMIZE_DIR} > "${KUSTOMIZE_DIR}/toolbox.yaml"    
    kubectl apply -f ${KUSTOMIZE_DIR}/toolbox.yaml
    $SILENT || printf 'Waiting for toolbox to be deployed: '
    
    local ELAPSED=0
    until [[ $(kubectl -n $K8S_NAMESPACE get pods -l $K8S_LABELS -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') =~ "True"  ]]; do 
      
        $SILENT || printf '.' && sleep 1;
        (( ELAPSED++ ))
        if [[ $ELAPSED -eq $TOOLBOX_TIMEOUT ]]; then
            $SILENT || echo 'Timed-out toolbox deployment, please check deployment logs'
            exit 1
        fi 
    done
    $SILENT || printf '\n'
}

delete_toolbox() {
    $SILENT || echo 'Deleting toolbox container'
    kubectl -n "$K8S_NAMESPACE" delete pod -l "$K8S_LABELS"; 
    kubectl -n "$K8S_NAMESPACE"  delete cm -l "$K8S_LABELS"; 
    kubectl -n "$K8S_NAMESPACE" delete clusterrolebindings.rbac.authorization.k8s.io -l "$K8S_LABELS"; 
    kubectl -n "$K8S_NAMESPACE" delete sa -l "$K8S_LABELS"
}



upload_data() {
    local podname=$(get_podname)
    $SILENT || echo "Copying data to ${podname}"
    kubectl -n "$K8S_NAMESPACE" cp . "${podname}":./
    kubectl -n "$K8S_NAMESPACE" cp ~/.aws "${podname}":/root/
    kubectl -n "$K8S_NAMESPACE" exec -it "${podname}" -- bash -c "\
    rm -f .env &&\
    ln -s .hub/env/$HUB_DOMAIN_NAME.env .env
    "
}

download_stack_state() {
    $SILENT || echo 'Downloading deployment state data'
    kubectl -n "$K8S_NAMESPACE" cp --no-preserve=false toolbox:.hub .hub/
}

create_toolbox() {
    generate_manifests
    deploy_toolbox
    upload_data
}

get_namespace() {
    echo "$K8S_NAMESPACE"
}

get_podname() {
    echo "$(kubectl get pod -l $K8S_LABELS -n $K8S_NAMESPACE -o=jsonpath='{.items[0].metadata.name}')"
}


GUIDE=${GUIDE:-true}
SILENT=${SILENT:-false}
IMAGE=${IMAGE:-agilestacks/toolbox}
IMAGE_VERSION=${IMAGE_VERSION:-latest}
K8S_NAMESPACE=${K8S_NAMESPACE:-kube-system}
K8S_LABELS=${K8S_LABELS:-app=toolbox,provider=agilestacks.com}
KUSTOMIZE_DIR=$(mktemp -d)
TOOLBOX_TIMEOUT=${TOOLBOX_TIMEOUT:-600}

export NOGUIDE SILENT

# shellcheck disable=SC1091
source .env


if  test -z "${AWS_PROFILE}" && \
    test -x "$(which aws)" && \
    aws sts get-caller-identity > /dev/null 2>&1; then
    AWS_PROFILE=$(aws configure list | awk  '$1 ~ /^profile$/ {print $2}')
    export AWS_PROFILE
fi

while [ "$1" != "" ]; do
    case $1 in
        -c | --create-toolbox )   create_toolbox
                                  exit
                                  ;;
        -g | --get-stack-state )  download_stack_state
                                  exit
                                  ;;
        --get-namespace )         get_namespace
                                  exit
                                  ;;
        --get-podname )           get_podname
                                  exit
                                  ;;
        -d | --delete-toolbox )   delete_toolbox
                                  exit
                                  ;;
        -S | --silent )           SILENT=true
                                  exit
                                  ;;
        -V | --verbose )          set -x
                                  ;;
        -h | --help )             usage
                                  exit
                                  ;;
        * )                       usage
                                  exit 1
    esac
    shift
done
