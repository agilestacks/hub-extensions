#!/bin/bash -e

bold=$(tput bold)
normal=$(tput sgr0)

usageApi()
{
    echo
    echo "Print list of stacks accessible by the user"
    echo "usage: $0 [-a] [-p kubernetes]... [-c tiller]...  [-h]"
    echo
    exit 0
}

usageLocal()
{
  echo
  echo "Print list of Agile Stacks platform configurations"
  echo "usage: $0"
  echo
  exit 0
}

if test -n "$HUB_TOKEN"; then

  while [ "$1" != "" ]; do
      case $1 in
          -p | --provides )
              shift
              PROVIDES='select(.provides and (.provides|to_entries[].key | contains("'$1'"))) |'
              ;;
          -c | --with-component )
              shift
              COMPONENTS='select(.componentsEnabled[] | contains("'$1'")) |'
              ;;
          -h | --help )       usageApi
                              exit
                              ;;
          * )                 usageApi
                              exit 1
      esac
      shift
  done

  hub api instance get -j | jq -rSM ". | if type==\"array\" then .[] else . end | [ $COMPONENTS $PROVIDES .domain ] | unique []"
  exit
fi

while [ "$1" != "" ]; do
  case $1 in
    -h | --help )   usageLocal
                    exit
                    ;;
  esac
  shift
done

envdir="$(pwd)/.hub/env"
mappingfile="$envdir/platforms"

mkdir -p "$envdir"
touch "$mappingfile"
platforms=$(<"$mappingfile")

if test -z "$platforms"; then
  platforms="N/A Run ${bold}hub configure -p <KUBE CONTEXT NAME> ${normal}to add"
fi

echo
echo "${bold}List of Agile Stacks platform configurations:${normal}"
echo
echo -e "Kube context name,ASI Platform configuration name\n , \n$platforms" | \
  sed 's/\t/,|,/g' | column -s ',' -t
echo

current=$(readlink .env || true)
filename=$(basename "$current" || true)
if test -n "$filename"; then
  echo "Current configuration: ${bold}$filename${normal}"
  echo
fi
echo "-----"
echo
echo "${bold}List of Kubernetes cluster contexts (from your local Kubeconfig) \
without Agile Stacks platform configuration:${normal}"
echo

clusters=$(kubectl config get-contexts --output='name')

while IFS= read -r cluster ;
do
  if test -z "$(echo "$platforms" | grep "$cluster")"; then
		  echo "$cluster";
	fi
done <<< "$clusters"
echo
