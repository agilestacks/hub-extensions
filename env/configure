#!/bin/bash -e
# shellcheck disable=SC2046,SC2086

usage() {
  cat << EOF
Environment variables parameters:
  -f --file               Path to hub.yaml or parameter files (can repeat multiple times; default: hub.yaml params.yaml)
  --defaults              Do not ask for user input and accept default values instead
EOF
}

if test -n "$(which tty)" && tty -s || echo "$-" | grep 'i'; then
  INTERACTIVE=true
else
  INTERACTIVE=false
fi

CACHE_FILE=${CACHE_FILE:-$(dirname "$0")/.history}
dotenv="$(dirname "$0")/dotenv -f $CACHE_FILE"
while [ "$1" != "" ]; do
  case $1 in
    --defaults ) 
      INTERACTIVE=false
      ;;  
    --output ) 
      shift         
      DOT_ENV="$1"
      ;;   
    -f | --file ) 
      shift
      HUB_FILES="$(echo "$HUB_FILES $1" | xargs)"
      ;;                
    -h | --help )
      usage
      exit
      ;;
  esac
  shift
done

if test $VERBOSE = "true"; then 
  set -x
fi

if test -z "$HUB_FILES"; then
  echo "Error: cannot find stack definition files"
  exit 1
fi

echo "Configuring environment variables"
ALL_ENVS=
for f in $HUB_FILES; do
  test -f $f || continue;
  envs=$(
    yq r $f -j | jq -cr \
      '.. | objects | with_entries(select(.key=="fromEnv")).fromEnv? | select(.!=null)'
  )
  ALL_ENVS="$ALL_ENVS $envs"
done

if test -z "$DOT_ENV"; then
  echo "Error: please run with option: $(dirname "0")/$(basename "0") --output FILE "
  exit 2
fi

getByEnvVar() {
  local f result
  for f in $HUB_FILES; do
    test -f $f || continue;
    result=$(
      yq r $f -j | jq -cr \
        ".. | objects | select(.fromEnv == \"$2\" ).$1 | select(.)"
    )
    if test -n "$result"; then
      echo "$result"
      break
    fi
  done
  if test -z "$result"; then
    # default value
    echo "$3"
  fi 
}

touch $DOT_ENV
for ENV in $(echo $ALL_ENVS | xargs -n 1 | sort -u); do
  VALUE=$(printenv "$ENV" || echo "")
  BRIEF=$(getByEnvVar "brief" "$ENV" "$ENV")
  if test -z "$VALUE"; then
    echo "* $BRIEF"
    default=$(getByEnvVar "default" "$ENV" "")
    DEFAULT="$($dotenv get $ENV --default "$default")"
    if test -z "$DEFAULT"; then
      DEFAULT="$(uuidgen | tr '[:upper:]' '[:lower:]' | tr -d -)"
      if $INTERACTIVE; then
        read -rp "  Enter value ($(echo $DEFAULT| cut -c1-15)... #random): " VALUE
      else
        VALUE="$DEFAULT"
      fi
    else
      if ! $INTERACTIVE; then
        VALUE="$DEFAULT"
      elif test "$DEFAULT" = "$(echo $DEFAULT | cut -c1-31)"; then
        read -rp "  Enter value ($DEFAULT #default): " VALUE
      else 
        read -rp "  Enter value ($(echo $DEFAULT | cut -c1-31)... #default): " VALUE
      fi
    fi

    if test -n "$VALUE"; then
      $dotenv set "$ENV=\"$VALUE\""
    else
      VALUE="$DEFAULT"
    fi
  else    
    echo "* $BRIEF: already configured"
  fi
  echo "$ENV=\"$VALUE\"" >> $DOT_ENV
  echo "  saved as $ENV to .env file"
done
