#!/bin/sh

verb=${1:-deploy}

if test -z "$COMPONENT_NAME" -o -z "$DOMAIN_NAME" -o -z "$CLOUD_KIND" -o -z "$STATE_BUCKET" -o -z "$STATE_REGION"; then
    echo "COMPONENT_NAME, DOMAIN_NAME, CLOUD_KIND, STATE_BUCKET, STATE_REGION must be set"
    exit 1
fi
if test "$CLOUD_KIND" != aws; then
    echo "Only 'aws' cloud kind is supported currently"
    exit 1
fi

export terraform=${TERRAFORM_BIN:-terraform}

if test -n "$TERRAFORM_VERSION"; then
    if ! $terraform version | grep $TERRAFORM_VERSION; then
        versioned_terraform=terraform-v${TERRAFORM_VERSION}
        if which $versioned_terraform >/dev/null; then
            terraform=$versioned_terraform
        else
            echo "No Terraform $TERRAFORM_VERSION version found; you may want to set TERRAFORM_BIN"
            exit 1
        fi
    fi
fi


export TF_DATA_DIR=.terraform/$DOMAIN_NAME
export TF_LOG_PATH=$TF_DATA_DIR/terraform.log
export TF_CLI_ARGS=${TF_CLI_ARGS:--input=false}
TFPLAN=$TF_DATA_DIR/terraform.tfplan
STATE_KEY="$DOMAIN_NAME/$(basename $(pwd))/$(echo $COMPONENT_NAME | sed -e 's/[^a-zA-Z0-9_-]+/-/g')/terraform.tfstate"

if test $verb == undeploy; then
    destroy=-destroy
fi

set +xe

mkdir -p $TF_DATA_DIR

if test -x pre-init; then
    tfvars=$(./pre-init | grep -E '^export ')
    if test -n "$tfvars"; then eval "$tfvars"; fi
fi

$terraform init -get=true $TF_CLI_ARGS -reconfigure -force-copy  \
    -backend-config="bucket=$STATE_BUCKET" \
    -backend-config="region=$STATE_REGION" \
    -backend-config="key=$STATE_KEY" \
    -backend-config="profile=$AWS_PROFILE"

if test -x pre-$verb; then
    tfvars=$(./pre-$verb | grep -E '^export ')
    if test -n "$tfvars"; then eval "$tfvars"; fi
fi

$terraform plan $destroy $TF_CLI_ARGS -out=$TFPLAN
$terraform apply $TF_CLI_ARGS -auto-approve $TFPLAN
echo

if test -x post-$verb; then
    ./post-$verb
fi
