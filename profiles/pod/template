#!/bin/bash -e

usage() {
    cat << EOF

Helper tool that create remote toolbox environment

Usage: 
$ $(basename "$0") --create-toolbox
Create remote toolbox on kuberentes cluster

Parameters:
    --label               Use these labels for toolbox pod (can repeat multiple)
    --image               Image of toolbox (default: agilestacks/toolbox:latest)
    -V  --verbose         Verbose outputs for debug purpose
    -h  --help            Print this message
EOF
}

IMAGE=${IMAGE:-agilestacks/toolbox}
NAMESPACE="automation-tasks"
while [ "$1" != "" ]; do
    case $1 in
        --namespace )
          shift 
          NAMESPACE=$1
        ;;    
        --image )
          shift 
          IMAGE=$1
        ;;
        -l | --label )
          shift
          LABELS=$(test -z "$LABELS" echo "$LABELS,$1" && echo "$1")
        ;;
        --exec-id )
          shift
          ID="$1"
        ;;
        --kubeconfig )
          shift
          KUBECONFIG="$1"
          export KUBECONFIG
        ;;        
        -V | --verbose )
          set -x
        ;;
        -h | --help )
          usage
          exit
        ;;
    esac
    shift
done

# shellcheck disable=SC2046
dotenv="$(dirname $(dirname $(dirname $0)))/env/dotenv -f .env"
# shellcheck disable=SC2086,SC2046
cat <<EOF
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: toolbox-$ID
  namespace: $NAMESPACE
  labels:
    provider: agilestacks.com
    app: toolbox
    exec-id: "$ID"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: toolbox-$ID
  labels:
    provider: agilestacks.com
    app: toolbox
    exec-id: "$ID"
subjects:
- kind: ServiceAccount
  name: toolbox-$ID
  namespace: $NAMESPACE
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: toolbox-$ID
  namespace: $NAMESPACE
  labels:
    provider: agilestacks.com
    app: toolbox
    exec-id: "$ID"
spec:
  serviceAccountName: toolbox-$ID
  initContainers:
  - name: init-workdir
    image: $IMAGE
    command: ["chown", "-R", "$(id -u):$(id -g)", $(pwd)]    
    securityContext:
      runAsUser: 0
    volumeMounts:
    - name: work-dir
      mountPath: $(pwd)     
  - name: init-home
    image: $IMAGE
    command: ["chown", "-R", "$(id -u):$(id -g)", $HOME]    
    securityContext:
      runAsUser: 0
    volumeMounts:
    - name: home-dir
      mountPath: $HOME
  containers:
  - name: toolbox
    image: $IMAGE
    workingDir: "$(pwd)" 
    command: ["sleep", "infinity"]    
    env:
    - {name: "USER", value: "$USER"}
    - {name: "UID", value: "$(id -u)"}
    - {name: "GID", value: "$(id -g)"}
    - {name: "HOME", value: "$HOME"}
$(env | grep -E '^(KUBECONFIG=|GOOGLE_|AZURE_|TF_|TERM=|LANG=|LC_)' | sed -e 's/^/    - {name: "/' -e 's/=/", value: "/'  -e 's/$/"}/')  
$($dotenv keys | while read -r key ; do echo '    - {name: "'$key'", value: "'$($dotenv get $key)'"}' ; done)
    volumeMounts:
    - name: work-dir
      mountPath: $(pwd)
    - name: home-dir
      mountPath: $HOME   
  securityContext:
    runAsUser: $(id -u)
    runAsGroup: $(id -g)
    fsGroup: $(id -g)
  volumes:
  - name: work-dir
    emptyDir: {}
  - name: home-dir
    emptyDir: {}   
EOF
