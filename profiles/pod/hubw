#!/bin/bash -e

# Simple wrapper script around hub deploy

HUB=$(which hub)
if test -z "$HUB"; then
  echo "Error: hub cli cannot be found"
  exit 1
fi

# shellcheck disable=SC2046
dotenv="$(dirname $(dirname $(dirname "$0")))/env/dotenv"
if test -f ".env"; then
  set +a
  eval "$($dotenv export -f ".env" )"
  set -a
fi

TOOLBOX_NAMESPACE=${TOOLBOX_NAMESPACE:-automation-tasks}
ID=$(uuidgen | tr '[:upper:]' '[:lower:]' | tr -d - | cut -c-8)

HUB_ARGS=$*
while (( "$#" )); do
  case $1 in
    -s | --state )
      shift 
      STATE_FILE=$1
      break
    ;;    
  esac
  shift
done

if test -z "$STATE_FILE"; then
  STATE_FILE=".hub/$HUB_DOMAIN_NAME.state"
fi

finalize() {
  set +e
  echo
  echo  -n "* Saving hub state $STATE_FILE"
  $kubectl cp --no-preserve=false "toolbox-$ID:$STATE_FILE" "$STATE_FILE" >/dev/null 2>&1; 
  echo "Done"
  echo -n "* Finalizing toolbox-$ID: "
  $kubectl delete -f "$1" --force >/dev/null 2>&1; 
  set -e
  rm -rf "$1"
  echo "Done"
}

echo "Starting deployment with kubernetes pod: toolbox-$ID"
temp=$(mktemp) || exit 1
# shellcheck disable=SC2064
trap "finalize $temp" EXIT
"$(dirname "$0")/template" --exec-id "$ID" --namespace="$TOOLBOX_NAMESPACE" > "$temp"

kubectl="kubectl -n $TOOLBOX_NAMESPACE" 
echo -n "* Checking presence of $TOOLBOX_NAMESPACE: "
if ! kubectl get namespace "$TOOLBOX_NAMESPACE" -o "name" 2>/dev/null; then
  echo "not found"
  echo -n "Deploying namespace: "
  kubectl create namespace "$TOOLBOX_NAMESPACE"
fi

echo -n "* Deploying a toolbox: "
if $kubectl -f "$temp" apply >/dev/null; then 
  echo "Done"
else 
  exit $?
fi
echo -n "* Waiting toolbox-$ID to report running: "
$kubectl wait "pod/toolbox-$ID" \
  --for=condition=Ready \
  --timeout=1200s

echo -n "* Synchronizing working directory (may take few minutes): "
find "." -type f \
  ! -path './.git/*' \
  ! -path './.envrc' \
  ! -path './.kubeconfig' \
  ! -path './kubeconfig.*' \
  | tar -cT - | \
  $kubectl exec -i "toolbox-$ID" -- tar xf -
echo "Done"

aws_profile=$($dotenv get "AWS_PROFILE")
# FIXME: maybe move this to before deploy (aws)?
if test -n "$aws_profile"; then
  echo -n "* Getting temporary aws credentials (valid for 2h) for profile: $aws_profile"
  # aws_creds=$(mktemp)
  # shellcheck disable=SC2064
  # trap "rm -rf $aws_creds" EXIT
  # line=$(aws --profile "$aws_profile" sts get-session-token --duration-seconds 7200 --output text)
  # command above will output
  # CREDENTIALS <access-key> <valid-through> <secret-key> <session-token>
# cat <<EOF > $aws_creds
# [$aws_profile]
# aws_access_key_id=$(echo $line | awk '{print $2}')
# aws_secret_access_key=$(echo $line | awk '{print $4}')
# aws_session_token=$(echo $line | awk '{print $5}')
# EOF
  $kubectl exec "toolbox-$ID" -- mkdir "$HOME/.aws"
  # we should not set credentials via env vars
  # TODO: validate STS
  # $kubectl cp "$aws_creds" "toolbox-$ID:$HOME/.aws/credentials"
  if test ! -f "$HOME/.aws/credentials"; then
    echo "Error: cannot find $HOME/.aws/credentials"
  fi 
  $kubectl cp "$HOME/.aws/credentials" "toolbox-$ID:$HOME/.aws/credentials"
  echo "Done"
fi

echo "Starting deployment"
set +e
# shellcheck disable=SC2086
$kubectl exec -i "toolbox-$ID" -- hub $HUB_ARGS
set -e
RET_VAL=$?
echo  "Done"
exit $RET_VAL
