#!/bin/bash -e
# shellcheck disable=SC2086

domain_zone="devops.delivery"

usage() {
cat << EOF
Generates initial configuration for Agile Stacks platform or switches to \
the existing platform

Usage: $(basename "$0") [-c KUBECONTEXT]

Parameters:
    -k --kubeconfig       Path to the kubeconfig. If not specified then use default to kubectl
    -c --kubecontext      Name of Kubernetes context in Kubeconfig file
                           "-" or "_" are the shorthands for "current context"
    --current-kubecontext Use current kubecontext existing
                           configuration (mandatory)
    -f --force             To recreate configuration
    -S --silent            Silence outputs
    --aws-region           AWS Region
    --aws-profile          AWS Profile

Use: $(basename "$0") [-c -] or [-c _] or [--current-kubecontext] for current kubecontext
EOF
}

GUIDE=${GUIDE:-true}
SILENT=${SILENT:-false}
while [ "$1" != "" ]; do
  case "$1" in
    --aws-region )           shift
                             export AWS_REGION="$1"
                             ;;
    --aws-profile )          shift
                             export AWS_PROFILE="$1"
                             ;;
    -f | --force )           FORCE=1
                             ;;
    -k | --kubeconfig )     shift
                             export KUBECONFIG="$1"
                             ;; 
    -c | --kubecontext )    shift
                             kubecontext="$1"
                             ;;
    --current-kubecontext ) kubecontext="_"
                             ;;
    -S | --silent )          SILENT=true
                             ;;
    -V | --verbose )         set +x
                             ;;
    -h | --help )            usage
                             exit
                             ;;
    * )                      usage
                             exit 1
  esac
  shift
done

if test -z "$kubecontext"; then
  usage
  exit 1
fi

if test "$kubecontext" == "-" || test "$kubecontext" == "_"; then
  kubecontext="$(kubectl config current-context)"
fi

export GUIDE SILENT

$SILENT || cat <<EOF
Configuring stack:
* Using kubecontext: $kubecontext
EOF

test -n "$AWS_PROFILE" || AWS_PROFILE="$AWS_DEFAULT_PROFILE"
test -n "$AWS_PROFILE" || AWS_PROFILE="default"
if test -z "$AWS_PROFILE"; then
  AWS_OPTS="$AWS_OPTS --profile=$AWS_PROFILE"
  echo "* Using AWS profile: $AWS_PROFILE"
fi

test -n "$AWS_REGION" || \
  AWS_REGION=$(aws $AWS_OPTS configure get region)
test -n "$AWS_REGION" || \
  AWS_REGION="us-east-1"

echo "* Using AWS region: $AWS_REGION"

AWS_ACCOUNT="$(aws $AWS_OPTS sts get-caller-identity --query 'Account' --output text)"
STATE_BUCKET="$AWS_ACCOUNT.$domain_zone"

if aws $AWS_OPTS s3api head-bucket --bucket="$STATE_BUCKET" 2>/dev/null; then
  STATE_REGION="$(aws $AWS_OPTS s3api get-bucket-location \
    --bucket="$STATE_BUCKET" --query 'LocationConstraint' \
    | sed -e 's/null/us-east-1/g')"
else 
  STATE_REGION="$AWS_REGION"
fi

hubdir="$(pwd)/.hub"
envdir="$(pwd)/.hub/env"
mkdir -p "$envdir"

if test -f "$envdir/$kubecontext.bubble"; then
  domain_name=$(jq -r '.domain' < "$envdir/$kubecontext.bubble")
  echo "* Using domain name: $domain_name"
fi

if test -z "$domain_name" || test -n "$FORCE"; then
  tmpfile1=`mktemp /tmp/superhub.XXXXXX` || exit 1
  # shellcheck disable=SC2064
  trap "rm -f $tmpfile1" EXIT
  echo "* Requesting domain name for in zone: $domain_zone"
  curl -s -X POST https://api.agilestacks.io/dns \
       -o "$tmpfile1" \
       -H 'Content-Type: application/json;charset=UTF-8' \
       -d "{\"baseDomain\": \"$domain_zone\"}"
  domain_name="$(jq -r '.domain' < "$tmpfile1")"
  kubeconfig="$envdir/$domain_name.kubeconfig"
  cat "$tmpfile1" > "$envdir/$kubecontext.bubble"

  # TODO: move this to the template (.hub/env/configure)
  cat <<EOF > "$envdir/$domain_name.env"
# Name of stack with associated domoain name (provided by Agile Stacks)
export HUB_STACK_NAME="$(echo "$domain_name" | cut -d. -f1)"
export HUB_DOMAIN_NAME="$domain_name"
export HUB_DOMAIN_KEY="$(jq -r '.key' < "$tmpfile1")"
# Deployment state and deployment plan
export HUB_STATE_FILE="$hubdir/$domain_name.state"
export HUB_ELABORATE_FILE="$hubdir/$domain_name.elaborate"
# Name and region of S3 bucket to store deployment state
export HUB_STATE_BUCKET="$STATE_BUCKET"
export HUB_STATE_REGION=$STATE_REGION

# Please double check if corresponds to your EKS cluster
export K8S_PROVIDER="eks"
export CLOUD_PROVIDER="aws"
export AWS_PROFILE="$AWS_PROFILE"
export AWS_REGION="$AWS_REGION"
export KUBECONFIG="$kubeconfig"
EOF

  $SILENT || cat << EOF
* New domain name: $domain_name
* Configuration has been saved to: $envdir/$domain_name.env
EOF
fi

test -n "$kubeconfig" || \
  kubeconfig="$envdir/$domain_name.kubeconfig"

if test -L ".env" && test "$(readlink -n .env)" != "$envdir/$domain_name.env"; then
  unlink ".env"
fi

if test ! -f ".env"; then
  ln -sf "$envdir/$domain_name.env" ".env"
  $SILENT || echo "* Updated .env link"
fi

if test ! -f "$kubeconfig" || test -n "$FORCE"; then
  clustername="$(kubectl config view --raw -o json \
  | jq -r '.contexts[] | select(.name == "'$kubecontext'").context.cluster')"
  username="$(kubectl config view --raw -o json \
  | jq -r '.contexts[] | select(.name == "'$kubecontext'").context.user')"
  cluster="$(kubectl config view --raw -o json \
  | jq -cM '.clusters[] | select(.name == "'$clustername'") + {"name": "'$domain_name'"}')"
  user="$(kubectl config view --raw -o json \
  | jq -cM '.users[] | select(.name == "'$username'")')"
  # shellcheck disable=SC2006
  tmpfile2=`mktemp /tmp/superhub.XXXXXX` || exit 1
  trap "rm -f $tmpfile2" EXIT

  # TODO: move this to the hub-kubeconfig?
  cat <<EOF > $tmpfile2
{
  "kind": "Config",
  "apiVersion": "v1",
  "preferences": {},
  "clusters": [
    $cluster
  ],
  "users": [
    $user
  ],
  "contexts": [
    {
      "name": "$domain_name",
      "context": {
        "cluster": "$domain_name",
        "user": "$username"
      }
    }
  ],
  "current-context": "$domain_name"
}
EOF
  
  if ! test -f "$kubeconfig"; then
    cat "$tmpfile2" > "$kubeconfig"
  elif ! cmp -s "$tmpfile2" "$kubeconfig"; then
    mv -f  "$kubeconfig" "$kubeconfig.bak"
    $SILENT || echo "* Saving current kubecconfig to $kubeconfig.bak"
    cat "$tmpfile2" > "$kubeconfig"
  fi
  $SILENT || echo "* Created kubeconfig $kubeconfig "
fi
echo 
hub ext aws status
